#!/usr/bin/env python3
import os, sys
import pwd

errors = []

avaiable_options = ['-h', '--help']

usage = '''
Usage:
    sudo python3 uninstall [option]

Options:
    -h         --help      Show this help text and exit
'''

username = os.getlogin()
user_home = pwd.getpwnam(username).pw_dir

def uninstall():
    options = []
    if len(sys.argv) > 1:
        options = sys.argv[1:]
        for o in options:
            if o not in avaiable_options:
                print("Option {} is not found.".format(o))
                print(usage)
                quit()
    if "-h" in options or "--help" in options:
        print(usage)
        quit()
    print("RasPad Launcher uninstall process starts")

    # print("Uninstall Qt runtime")
    # do(msg="Remove Qt Runtime",
    #     cmd='run_command("rm -rf /usr/local/qt5pi")')

    print("Uninstall RasPad Launcher")
    do(msg="Remove raspad-faq.desktop",
        cmd='run_command("rm -f /usr/share/applications/raspad-faq.desktop")')
    do(msg="Remove raspad-launcher.desktop",
        cmd='run_command("rm -f /usr/share/applications/raspad-launcher.desktop")')
    do(msg="Remove icon",
        cmd='run_command("rm -f /usr/share/icons/raspad.png")')
    do(msg="Remove raspad-launcher",
        cmd='run_command("rm -f /usr/local/bin/raspad-launcher")')
    do(msg="Remove raspad-launcher-helper",
        cmd='run_command("rm -f /usr/local/bin/raspad-launcher-helper")')

    panel_file = f"{user_home}/.config/lxpanel/LXDE-pi/panels/panel"
    backup_file = f'{user_home}/{panel_file.replace("/", "_")}.bak'
    if os.path.exists(backup_file):
        do(msg="Restore panel backup",
            cmd=f'run_command("mv {backup_file} {panel_file}")')
    else:
        do(msg="Remove panel settings",
            cmd=f'run_command("rm {panel_file}")')

    do(msg="Refresh panel",
        cmd='run_command("lxpanelctl restart")')

    # print("Uninstall MatchBox Keyboard")
    # do(msg="Uninstall matchbox-keyboard",
    #     cmd='run_command("apt purge matchbox-keyboard -y")')
    # do(msg="Remove matchbox-keyboard.desktop",
    #     cmd='run_command("rm /usr/share/applications/matchbox-keyboard.desktop")')
    # do(msg="Remove keyboard-helper",
    #     cmd='run_command("rm /usr/local/bin/keyboard-helper")')

    if len(errors) == 0:
        print("Finished")
    else:
        print("\n\nError happened in uninstall process:")
        for error in errors:
            print(error)
        print("Try to fix it yourself, or contact service@sunfounder.com with this message")
        sys.exit(1)

def cleanup():
    pass

class Modules(object):
    '''
        To setup /etc/modules
    '''

    def __init__(self, file="/etc/modules"):
        self.file = file
        with open(self.file, 'r') as f:
            self.configs = f.read()
        self.configs = self.configs.split('\n')

    def remove(self, expected):
        for config in self.configs:
            if expected in config:
                self.configs.remove(config)
        return self.write_file()

    def set(self, name):
        have_excepted = False
        for i in range(len(self.configs)):
            config = self.configs[i]
            if name in config:
                have_excepted = True
                tmp = name
                self.configs[i] = tmp
                break

        if not have_excepted:
            tmp = name
            self.configs.append(tmp)
        return self.write_file()

    def write_file(self):
        try:
            config = '\n'.join(self.configs)
            # print(config)
            with open(self.file, 'w') as f:
                f.write(config)
            return 0, config
        except Exception as e:
            return -1, e

class Config(object):
    ''' 
        To setup /boot/config.txt
    '''

    def __init__(self, file="/boot/config.txt"):
        self.file = file
        with open(self.file, 'r') as f:
            self.configs = f.read()
        self.configs = self.configs.split('\n')

    def remove(self, expected):
        for config in self.configs:
            if expected in config:
                self.configs.remove(config)
        return self.write_file()

    def set(self, name, value=None):
        have_excepted = False
        for i in range(len(self.configs)):
            config = self.configs[i]
            if name in config:
                have_excepted = True
                tmp = name
                if value != None:
                    tmp += '=' + value
                self.configs[i] = tmp
                break

        if not have_excepted:
            tmp = name
            if value != None:
                tmp += '=' + value
            self.configs.append(tmp)
        return self.write_file()

    def write_file(self):
        try:
            config = '\n'.join(self.configs)
            # print(config)
            with open(self.file, 'w') as f:
                f.write(config)
            return 0, config
        except Exception as e:
            return -1, e

class Cmdline(object):
    ''' 
        To setup /boot/cmdline.txt
    '''

    def __init__(self, file="/boot/cmdline.txt"):
        self.file = file
        with open(self.file, 'r') as f:
            cmdline = f.read()
        self.cmdline = cmdline.strip()
        self.cmds = self.cmdline.split(' ')

    def remove(self, expected):
        for cmd in self.cmds:
            if expected in cmd:
                self.cmds.remove(cmd)
        return self.write_file()

    def write_file(self):
        try:
            cmdline = ' '.join(self.cmds)
            # print(cmdline)
            with open(self.file, 'w') as f:
                f.write(cmdline)
            return 0, cmdline
        except Exception as e:
            return -1, e


def run_command(cmd=""):
    import subprocess
    p = subprocess.Popen(
        cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    result = p.stdout.read().decode('utf-8')
    status = p.poll()
    # print(result)
    # print(status)
    return status, result


def do(msg="", cmd=""):
    print(" - %s..." % (msg), end='\r')
    print(" - %s... " % (msg), end='')
    status, result = eval(cmd)
    # print(status, result)
    if status == 0 or status == None or result == "":
        print('Done')
        return True
    else:
        print('Error')
        errors.append("%s error:\n  Status:%s\n  Error:%s" %
                      (msg, status, result))
        return False

def check_sudo():
    if os.geteuid() != 0:
        sys.exit("You need root permissions to do this!")

if __name__ == "__main__":
    check_sudo()
    try:
        uninstall()
    except KeyboardInterrupt:
        print("Canceled.")
        cleanup()

# if __name__ == "__main__":
#     test()
